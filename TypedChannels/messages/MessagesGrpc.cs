// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace RPC {
  public static partial class BasicChannel
  {
    static readonly string __ServiceName = "messages.BasicChannel";

    static readonly grpc::Marshaller<global::RPC.OpTarget> __Marshaller_OpTarget = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RPC.OpTarget.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RPC.OpSuccess> __Marshaller_OpSuccess = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RPC.OpSuccess.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RPC.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RPC.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RPC.MemberList> __Marshaller_MemberList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RPC.MemberList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RPC.StringMsg> __Marshaller_StringMsg = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RPC.StringMsg.Parser.ParseFrom);

    static readonly grpc::Method<global::RPC.OpTarget, global::RPC.OpSuccess> __Method_Add = new grpc::Method<global::RPC.OpTarget, global::RPC.OpSuccess>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Add",
        __Marshaller_OpTarget,
        __Marshaller_OpSuccess);

    static readonly grpc::Method<global::RPC.OpTarget, global::RPC.OpSuccess> __Method_AddInvisible = new grpc::Method<global::RPC.OpTarget, global::RPC.OpSuccess>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddInvisible",
        __Marshaller_OpTarget,
        __Marshaller_OpSuccess);

    static readonly grpc::Method<global::RPC.OpTarget, global::RPC.OpSuccess> __Method_Remove = new grpc::Method<global::RPC.OpTarget, global::RPC.OpSuccess>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Remove",
        __Marshaller_OpTarget,
        __Marshaller_OpSuccess);

    static readonly grpc::Method<global::RPC.Empty, global::RPC.MemberList> __Method_GetVisibleMembers = new grpc::Method<global::RPC.Empty, global::RPC.MemberList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVisibleMembers",
        __Marshaller_Empty,
        __Marshaller_MemberList);

    static readonly grpc::Method<global::RPC.Empty, global::RPC.MemberList> __Method_GetAllMembers = new grpc::Method<global::RPC.Empty, global::RPC.MemberList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllMembers",
        __Marshaller_Empty,
        __Marshaller_MemberList);

    static readonly grpc::Method<global::RPC.StringMsg, global::RPC.OpSuccess> __Method_BroadcastString = new grpc::Method<global::RPC.StringMsg, global::RPC.OpSuccess>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BroadcastString",
        __Marshaller_StringMsg,
        __Marshaller_OpSuccess);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::RPC.MessagesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BasicChannel</summary>
    public abstract partial class BasicChannelBase
    {
      public virtual global::System.Threading.Tasks.Task<global::RPC.OpSuccess> Add(global::RPC.OpTarget request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RPC.OpSuccess> AddInvisible(global::RPC.OpTarget request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RPC.OpSuccess> Remove(global::RPC.OpTarget request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RPC.MemberList> GetVisibleMembers(global::RPC.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RPC.MemberList> GetAllMembers(global::RPC.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Broadcast
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::RPC.OpSuccess> BroadcastString(global::RPC.StringMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BasicChannel</summary>
    public partial class BasicChannelClient : grpc::ClientBase<BasicChannelClient>
    {
      /// <summary>Creates a new client for BasicChannel</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BasicChannelClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BasicChannel that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BasicChannelClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BasicChannelClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BasicChannelClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::RPC.OpSuccess Add(global::RPC.OpTarget request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Add(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RPC.OpSuccess Add(global::RPC.OpTarget request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Add, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RPC.OpSuccess> AddAsync(global::RPC.OpTarget request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RPC.OpSuccess> AddAsync(global::RPC.OpTarget request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Add, null, options, request);
      }
      public virtual global::RPC.OpSuccess AddInvisible(global::RPC.OpTarget request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddInvisible(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RPC.OpSuccess AddInvisible(global::RPC.OpTarget request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddInvisible, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RPC.OpSuccess> AddInvisibleAsync(global::RPC.OpTarget request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddInvisibleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RPC.OpSuccess> AddInvisibleAsync(global::RPC.OpTarget request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddInvisible, null, options, request);
      }
      public virtual global::RPC.OpSuccess Remove(global::RPC.OpTarget request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Remove(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RPC.OpSuccess Remove(global::RPC.OpTarget request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Remove, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RPC.OpSuccess> RemoveAsync(global::RPC.OpTarget request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RPC.OpSuccess> RemoveAsync(global::RPC.OpTarget request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Remove, null, options, request);
      }
      public virtual global::RPC.MemberList GetVisibleMembers(global::RPC.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetVisibleMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RPC.MemberList GetVisibleMembers(global::RPC.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVisibleMembers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RPC.MemberList> GetVisibleMembersAsync(global::RPC.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetVisibleMembersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RPC.MemberList> GetVisibleMembersAsync(global::RPC.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVisibleMembers, null, options, request);
      }
      public virtual global::RPC.MemberList GetAllMembers(global::RPC.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAllMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RPC.MemberList GetAllMembers(global::RPC.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllMembers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RPC.MemberList> GetAllMembersAsync(global::RPC.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAllMembersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RPC.MemberList> GetAllMembersAsync(global::RPC.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllMembers, null, options, request);
      }
      /// <summary>
      /// Broadcast
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RPC.OpSuccess BroadcastString(global::RPC.StringMsg request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BroadcastString(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Broadcast
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::RPC.OpSuccess BroadcastString(global::RPC.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BroadcastString, null, options, request);
      }
      /// <summary>
      /// Broadcast
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RPC.OpSuccess> BroadcastStringAsync(global::RPC.StringMsg request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BroadcastStringAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Broadcast
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::RPC.OpSuccess> BroadcastStringAsync(global::RPC.StringMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BroadcastString, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BasicChannelClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BasicChannelClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BasicChannelBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Add, serviceImpl.Add)
          .AddMethod(__Method_AddInvisible, serviceImpl.AddInvisible)
          .AddMethod(__Method_Remove, serviceImpl.Remove)
          .AddMethod(__Method_GetVisibleMembers, serviceImpl.GetVisibleMembers)
          .AddMethod(__Method_GetAllMembers, serviceImpl.GetAllMembers)
          .AddMethod(__Method_BroadcastString, serviceImpl.BroadcastString).Build();
    }

  }
}
#endregion
